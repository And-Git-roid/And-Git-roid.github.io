<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://And-Git-roid.github.io</id>
    <title>Gridea</title>
    <updated>2020-07-31T01:17:21.305Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://And-Git-roid.github.io"/>
    <link rel="self" href="https://And-Git-roid.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://And-Git-roid.github.io/images/avatar.png</logo>
    <icon>https://And-Git-roid.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Android去掉标题栏]]></title>
        <id>https://And-Git-roid.github.io/post/android-qu-diao-biao-ti-lan/</id>
        <link href="https://And-Git-roid.github.io/post/android-qu-diao-biao-ti-lan/">
        </link>
        <updated>2020-07-31T00:41:12.000Z</updated>
        <content type="html"><![CDATA[<p>Android去掉标题栏实在使用的太频繁了，总结一下有哪些方法。<br>
第一种：</p>
<pre><code>requestWindowFeature(Window.FEATURE_NO_TITLE);
//去掉标题栏这一句一定要写在setContentView()前面
</code></pre>
<p>第二种</p>
<pre><code>自定义style
&lt;style name=&quot;AppTheme.NoActionBar&quot; parent=&quot;AppTheme&quot;&gt;
        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;
        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;
    &lt;/style&gt;
加入上面的两个属性并使用
</code></pre>
<p>如果是给Application属性配置，那么整个应用的主题都没有ActionBar。如果是给某个Activity设置，那么只有这个Activity没有ActionBar。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ListView和RecyclerView的基本使用（二）]]></title>
        <id>https://And-Git-roid.github.io/post/listview-he-recyclerview-de-ji-ben-shi-yong-er/</id>
        <link href="https://And-Git-roid.github.io/post/listview-he-recyclerview-de-ji-ben-shi-yong-er/">
        </link>
        <updated>2020-07-25T01:06:58.000Z</updated>
        <content type="html"><![CDATA[<p>在上一篇中介绍了ListView和RecyclerView的使用流程，这一篇将介绍一些小的不同点。<br>
首先是空数据处理的不同。ListView提供了setEmptyView这个API让我们处理Adapter中数据为空的情况。设置代码和效果如下：</p>
<pre><code>listView = findViewById(R.id.fruit_listview);
 listView.setEmptyView(findViewById(R.id.test_empty));
</code></pre>
<p><img src="https://And-Git-roid.github.io/post-images/1595639581872.jpg" alt="" loading="lazy"><br>
在这里需要特别注意R.id.test_empty，通过代码来给出说明</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&gt;

    &lt;ListView
        android:id=&quot;@+id/fruit_listview&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;/&gt;
    &lt;include
        android:id=&quot;@+id/test_empty&quot;
        layout=&quot;@layout/item_empty&quot;/&gt;

&lt;/LinearLayout&gt;
</code></pre>
<p>从上面的代码中我们可以看到test_empty是和ListView处于同一布局中的一个需要在空数据使需要展示的layout的id，这一点很重要。如果我们单独建立一个新的layout使它不处于当前ListView的同一布局中，你会发现没有任何效果。<br>
RecyclerView中没有空数据的处理方式，需要我们自己来完成。我发现最简单有效的方法是在RecyclerView的外面嵌套一个布局，然后将空数据时需要展示的图片设置为布局的背景，当发现没有数据时让背景显示就可以了。<br>
第二点是HeaderView和FootView两种类型的视图。ListView中提供了相关的API让我们设置，当我们只想在ListView的头部或者底部添加一个View的时候，可以不用影响到Adapter的编写。<br>
<img src="https://And-Git-roid.github.io/post-images/1595642964938.webp" alt="" loading="lazy"><br>
HeaderView的简单使用：<br>
首先是头部View的layout布局</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot;
    android:orientation=&quot;horizontal&quot;
    android:layout_height=&quot;wrap_content&quot;&gt;

    &lt;ImageView
        android:id=&quot;@+id/header_image&quot;
        android:layout_width=&quot;60dp&quot;
        android:layout_height=&quot;60dp&quot;
        android:src=&quot;@mipmap/nodata&quot;/&gt;
    &lt;TextView
        android:id=&quot;@+id/header_txt&quot;
        android:text=&quot;用来测试头部和底部View&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_gravity=&quot;center_vertical&quot;/&gt;

&lt;/LinearLayout&gt;
</code></pre>
<p>然后我们生成头部view并且设置给ListView</p>
<pre><code> //绑定ListView控件
        listView = findViewById(R.id.fruit_listview);
        View view = LayoutInflater.from(MainActivity.this).inflate(R.layout.header_item,null);
        TextView test = view.findViewById(R.id.header_txt);
        test.setText(&quot;没问题了&quot;);
        String text = &quot;测试&quot;;
        listView.addHeaderView(view,text,true);
        //生成我们前面写的适配器
        Adapter adapter = new Adapter(MainActivity.this,R.layout.fruit_list_item,FruitList);
        //ListView绑定适配器
        listView.setAdapter(adapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int i, long l) {
                //在这里面实现具体操作
                String s = (String) adapterView.getItemAtPosition(0);
                Toast.makeText(MainActivity.this,s,Toast.LENGTH_SHORT).show();
                Toast.makeText(MainActivity.this,i+&quot;&quot;,Toast.LENGTH_SHORT).show();
            }
        });
</code></pre>
<p>我注意到addHeaderView()方法中有三个参数，但是第二个参数却不知道有什么作用。查阅了大量的文章之后，其实第二个参数Object data是Adapter中getItem获得的值。从上面的代码可以看出在item受到点击之后我会让Toast显示第一个Item，也就是HeaderView中getItem获取到的值，并且让Toast显示被点击item的当前位置，接下来我们看效果。<br>
<img src="https://And-Git-roid.github.io/post-images/1595644320036.gif" alt="" loading="lazy"><br>
这下我们就知道第二个参数有什么作用了。此外，当我们点击列表中第三项的item时显示的位置是3，所以说我们的headView的位置是0，它也算作整个ListView的一项，这并不难理解。需要注意的是addHeaderView()要在ListView设置Adapter之前。<br>
RecyclerView没有设计HeaderView和FootView，只能我们自己去完成。简单粗暴的方式就是添加ViewType，根据类型生成不同的item。从网上看到另外一种思路，通过装饰者模式扩充Adapter的功能，从而实现添加HeaderView和FooterView，并且不影响Adapter的编写工作，后面会单独学习。<br>
接下来我们看局部刷新。在更新了ListView的数据源之后，需要通过Adapter的notifyDataSetChanged来通知视图更新变化，好处是比较简单，坏处是会重绘每个item，但实际上并不是每个Item都需要重绘。我在Adapter中加了一个方法：</p>
<pre><code> public void updateItemView(ListView listView, int position, Fruit newFruit){
        int index = position - listView.getFirstVisiblePosition();
        if (index &gt;= 0 &amp;&amp;  index &lt; listView.getChildCount() ){
            getItem(position).setFruitName(newFruit.getFruitName());
            getItem(position).setImageId(newFruit.getImageId());
        }
        View view = listView.getChildAt(position);
        getView(position,view,listView);
    }
</code></pre>
<p>然后我们点击第0个Item，然后改变第1个Item的内容来模仿数据更新的过程，代码和效果如下：</p>
<pre><code> listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int i, long l) {
                if (i == 0){
                    Fruit f = new Fruit(&quot;我是牛奶&quot;,R.mipmap.cow);
                    adapter.updateItemView(listView,1,f);
                }
            }
        });
</code></pre>
<p><img src="https://And-Git-roid.github.io/post-images/1595648430681.gif" alt="" loading="lazy"><br>
RecyclerView.Adapter为我们提供了notifyItemChanged()用于更新单个ItemView的刷新。代码和使用效果如下：</p>
<pre><code>dataList.get(1).setName(&quot;我是齐天大圣孙悟空&quot;);
dataList.get(1).setImageId(R.mipmap.monkey);
adapter.notifyItemChanged(1);
</code></pre>
<p><img src="https://And-Git-roid.github.io/post-images/1595655452160.gif" alt="" loading="lazy"><br>
最后就关于动画效果，RecyclerView给我们提供了一些Item动画相关的 API,ListView则没有。下面简单看一下RecyclerView的Item动画效果。<br>
RecyclerView.ItemAnimator是一个抽象类，该抽象类有一个子类SimpleItemAnimator，不过也是一个抽象类，我们通常用的是它的孙子DefaultItemAnimator。在DefaultItemAnimator中有Add、Remove、Move、Change四种动画效果。<br>
需要注意的是，要实现这四种动画效果，数据更新时不能通过</p>
<pre><code>Adapter.notifyDataSetChanged();
</code></pre>
<p>而是通过：</p>
<pre><code>Adapter.notifyItemInserted(int position) 
Adapter.notifyItemRemoved(int position)
Adapter.notifyItemChanged(int position)
Adapter.notifyItemMoved(int fromPosition, int  toPosition)
</code></pre>
<p>接下来通过几行代码看一下效果：</p>
<pre><code>DefaultItemAnimator defaultItemAnimator = new DefaultItemAnimator();
defaultItemAnimator.setAddDuration(1000);
recycler.setItemAnimator(defaultItemAnimator);
</code></pre>
<pre><code>Fruit f = new Fruit(&quot;我是齐天大圣孙悟空&quot;,R.mipmap.monkey);
dataList.add(defaultP,f);
adapter.notifyItemInserted(defaultP);
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://And-Git-roid.github.io/post-images/1595657952273.gif" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ListView和RecyclerView的基本使用（一）]]></title>
        <id>https://And-Git-roid.github.io/post/listview-he-recyclerview-de-shi-yong-he-shi-xian-ji-zhi/</id>
        <link href="https://And-Git-roid.github.io/post/listview-he-recyclerview-de-shi-yong-he-shi-xian-ji-zhi/">
        </link>
        <updated>2020-07-23T09:48:57.000Z</updated>
        <content type="html"><![CDATA[<p>ListView是Android系统提供的一种列表显示控件。RecyclerView是ListView的升级版，它在展现形式上更加灵活，缓存机制的不同也使得它效率更高。<br>
ListView的使用<br>
以ListView的形式展现内容主要会涉及到四个部分：ListView、Adapter和item布局和数据。ListView只负责显示内容，item布局决定了数据的展现形式，Adapter作为一个中间桥梁将item布局和数据绑定并最终交给ListView展示。<br>
ListView展示简单的水果图片及名称为例。<br>
主界面布局只包含一个ListView</p>
<pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&gt;

    &lt;ListView
        android:id=&quot;@+id/fruit_listview&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;/&gt;

&lt;/LinearLayout&gt; 
</code></pre>
<p>数据模型Fruit:里面只包含两个属性，FruitName代表水果名字，ImageId代表水果图片。</p>
<pre><code> public class Fruit {
    private String FruitName;
    private int ImageId;

    public Fruit(String fruitName, int imageId) {
        FruitName = fruitName;
        ImageId = imageId;
    }

    public String getFruitName() {
        return FruitName;
    }

    public int getImageId() {
        return ImageId;
    }
} 
</code></pre>
<p>item布局layout</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;&gt;
    &lt;ImageView
        android:id=&quot;@+id/fruit_item_image&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;/&gt;
    &lt;TextView
        android:id=&quot;@+id/fruit_item_name&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;/&gt;

&lt;/LinearLayout&gt;
</code></pre>
<p>Adapter内容，代码里有详细的注释。Adapter继承了系统提供的ArrayAdapter,构造方法要获取item的布局layout。Adapter的核心方法就是getView()，在这个方法中首先将Item的布局layout转换成了View，然后获取了View的控件，最后将数据和控件绑定，再将View返回给ListView。这个方法中可以优化提升效率，我们看到每次ListView要生成一个Item时都得生成一个新的View，但是在这里所有的View样式是一样的，那么当ListView要生成新的Item的View时，能不能利用已经滑出界面的Item的View呢？答案是可以的，而且可以借助ViewHolder将已经获取到的View中的控件保存起来，避免每次都获取控件，具体的实现在后面会写出来。</p>
<pre><code>public class Adapter extends ArrayAdapter&lt;Fruit&gt; {
    int ResId;
    public Adapter(@NonNull Context context, int resource, @NonNull List objects) {
        super(context, resource, objects);
        //item的布局layoutId(R.layout.)
        ResId = resource;
    }

    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
        //将item的布局layout转化为View
        View view = LayoutInflater.from(parent.getContext()).inflate(ResId,parent,false);
        //获取item布局中的ImageView和TextView
        ImageView FruitImage = view.findViewById(R.id.fruit_item_image);
        TextView FruitName = view.findViewById(R.id.fruit_item_name);
        //获取对应位置的数据对象
        Fruit fruit = (Fruit) getItem(position);
        //布局绑定数据
        FruitImage.setImageResource(fruit.getImageId());
        FruitName.setText(fruit.getFruitName());
        return view;
    }
}
</code></pre>
<p>MainActivity的代码</p>
<pre><code>public class MainActivity extends AppCompatActivity {

    private List&lt;Fruit&gt; FruitList = new ArrayList&lt;&gt;();
    private ListView listView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //初始化测试数据
        initData();
        //绑定ListView控件
        listView = findViewById(R.id.fruit_listview);
        //生成我们前面写的适配器
        Adapter adapter = new Adapter(MainActivity.this,R.layout.fruit_list_item,FruitList);
        //ListView绑定适配器
        listView.setAdapter(adapter);
    }
    //初始化数据
    //这里水果的名称和图片并不是对应的，只是随便找了几张图片来测试
    //但是我们可以看到测试数据由三组重复数据构成，一组数据有6个数据模型对象
    //只要三组的图片顺序和名称对应上就没问题
    private void initData(){
        for (int i = 0; i &lt; 3 ; i++){
            Fruit a = new Fruit(&quot;Apple&quot;+i,R.drawable.a);
            FruitList.add(a);
            Fruit b = new Fruit(&quot;Banana&quot;+i,R.drawable.b);
            FruitList.add(b);
            Fruit c = new Fruit(&quot;Orange&quot;+i,R.drawable.c);
            FruitList.add(c);
            Fruit d = new Fruit(&quot;Demon&quot;+i,R.drawable.d);
            FruitList.add(d);
            Fruit e = new Fruit(&quot;Lemon&quot;+i,R.drawable.e);
            FruitList.add(e);
            Fruit f = new Fruit(&quot;Watermon&quot;+i,R.drawable.f);
            FruitList.add(f);
        }
    }
}
</code></pre>
<p>最后效果如下图所示<br>
<img src="https://And-Git-roid.github.io/post-images/1595506834799.gif" alt="" loading="lazy"><br>
接下来是对之前提到过的Adapter的优化，具体代码如下。</p>
<pre><code>public class Adapter extends ArrayAdapter&lt;Fruit&gt; {
    int ResId;
    public Adapter(@NonNull Context context, int resource, @NonNull List objects) {
        super(context, resource, objects);
        //item的布局layoutId(R.layout.)
        ResId = resource;
    }

    class ViewHolder {
        ImageView FruitImage;
        TextView FruitName;
    }

    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {

        Fruit fruit = getItem(position);
        View view;
        ViewHolder holder;
        //先判断convertView是否为空
        if (convertView == null){
            //将item的布局layout转化为View
            view = LayoutInflater.from(parent.getContext()).inflate(ResId,parent,false);
            holder = new ViewHolder();
            holder.FruitImage = view.findViewById(R.id.fruit_item_image);
            holder.FruitName = view.findViewById(R.id.fruit_item_name);
            view.setTag(holder);
        }else {
            view = convertView;
            holder = (ViewHolder) view.getTag();
        }
        holder.FruitImage.setImageResource(fruit.getImageId());
        holder.FruitName.setText(fruit.getFruitName());
        return view;
    }
}
</code></pre>
<p>ListView的Item的点击事件有OnItemClickListener,简单贴一下代码</p>
<pre><code>listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int i, long l) {
                //在这里面实现具体操作
            }
        });
</code></pre>
<p>我们可以看到ListView的使用并不复杂，在不优化的情况下就更加简单了。但是它只能以列表的形式展示内容，而且不适合用于多种类型item的展示，效率较低，在最后会统一对比ListView和RecyclerView的缓存机制。<br>
RecyclerView的Demo展示和ListView同样的内容。接下来开始看代码。<br>
同样的配方，同样的主界面布局（只是ListView换成RecyclerView）、item布局和展示内容。<br>
主界面布局：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&gt;

    &lt;androidx.recyclerview.widget.RecyclerView
        android:id=&quot;@+id/fruit_recycler&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;/&gt;

&lt;/LinearLayout&gt;
</code></pre>
<p>item布局：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:orientation=&quot;vertical&quot;
    android:layout_margin=&quot;5dp&quot;&gt;

    &lt;ImageView
        android:id=&quot;@+id/fruit_item_image&quot;
        android:layout_width=&quot;150dp&quot;
        android:layout_height=&quot;150dp&quot;
        android:layout_gravity=&quot;center_horizontal&quot;/&gt;
    &lt;TextView
        android:layout_gravity=&quot;left&quot;
        android:id=&quot;@+id/fruit_item_name&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;/&gt;

&lt;/LinearLayout&gt;
</code></pre>
<p>Fruit数据模型：</p>
<pre><code>public class Fruit {
    private String name;
    private int imageId;

    public Fruit(String name, int imageId) {
        this.name = name;
        this.imageId = imageId;
    }

    public String getName() {
        return name;
    }

    public int getImageId() {
        return imageId;
    }
}
</code></pre>
<p>Adapter中的内容不一样了：</p>
<pre><code>public class Adapter extends RecyclerView.Adapter&lt;Adapter.ViewHolder&gt; {

    private List&lt;Fruit&gt; fruitList;

    public Adapter(List&lt;Fruit&gt; dataList) {
        fruitList = dataList;
    }

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_list_item,parent,false);
        ViewHolder viewHolder = new ViewHolder(view);
        return viewHolder;
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        Fruit fruit = fruitList.get(position);
        holder.fruitName.setText(fruit.getName());
        holder.fruitImage.setImageResource(fruit.getImageId());
    }

    @Override
    public int getItemCount() {
        return fruitList.size();
    }

    class ViewHolder extends RecyclerView.ViewHolder{

        ImageView fruitImage;
        TextView fruitName;
        public ViewHolder(@NonNull View itemView) {
            super(itemView);
            fruitImage = itemView.findViewById(R.id.fruit_item_image);
            fruitName = itemView.findViewById(R.id.fruit_item_name);
        }
    }
}
</code></pre>
<p>MainActivity代码：</p>
<pre><code>public class MainActivity extends AppCompatActivity {

    private List&lt;Fruit&gt; dataList = new ArrayList&lt;&gt;();
    RecyclerView recycler;
    LinearLayoutManager linearManager;
    StaggeredGridLayoutManager staggerManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initData();
        recycler = findViewById(R.id.fruit_recycler);
        linearManager = new LinearLayoutManager(this);
        staggerManager = new StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL);
        Adapter adapter = new Adapter(dataList);
        recycler.setLayoutManager(linearManager);
        recycler.setAdapter(adapter);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main,menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.action_add){
            recycler.setLayoutManager(staggerManager);
            return true;
        }

        if (item.getItemId() == R.id.action_settings){
            recycler.setLayoutManager(linearManager);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initData(){
        for (int i = 0; i &lt; 3 ; i++){
            //用于瀑布流展示
            Fruit a = new Fruit(getRandomLengthName(&quot;Apple&quot;),R.drawable.a);
            dataList.add(a);
            Fruit b = new Fruit(getRandomLengthName(&quot;Banana&quot;),R.drawable.b);
            dataList.add(b);
            Fruit c = new Fruit(getRandomLengthName(&quot;Orange&quot;),R.drawable.c);
            dataList.add(c);
            Fruit d = new Fruit(getRandomLengthName(&quot;Demon&quot;),R.drawable.d);
            dataList.add(d);
            Fruit e = new Fruit(getRandomLengthName(&quot;Lemon&quot;),R.drawable.e);
            dataList.add(e);
            Fruit f = new Fruit(getRandomLengthName(&quot;Watermon&quot;),R.drawable.f);
            dataList.add(f);
        }
    }
//将水果名字的长度随机变长，使瀑布流效果更明显一些
    private String getRandomLengthName(String name){
        Random random = new Random();
        int length = random.nextInt(10)+1;
        StringBuilder builder = new StringBuilder();
        for (int i  = 0; i &lt; length; i++){
            builder.append(name);
        }
        return builder.toString();
    }
}
</code></pre>
<p>这里我们展示两种效果，分别是列表形式和瀑布流形式，效果如下：<br>
<img src="https://And-Git-roid.github.io/post-images/1595554085089.gif" alt="" loading="lazy"><br>
从基础使用上看，我们可以明显看出，RecyclerView相比ListView的区别如下：</p>
<ul>
<li>ViewHolder的编写更规范了</li>
<li>RecyclerView复用Item的工作由它自身实现，不再需要像ListView那样自己setTag</li>
<li>RecyclerView需要多做一步工作，设置LayoutManager。正是多了一个LayoutManager，RecyclerView才能更加灵活的变换展现形式，可以以列表、网格和瀑布流的形式进行展示。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git与Github]]></title>
        <id>https://And-Git-roid.github.io/post/git-yu-github/</id>
        <link href="https://And-Git-roid.github.io/post/git-yu-github/">
        </link>
        <updated>2020-07-21T03:10:50.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>Git是当下最先进的开源分布式版本控制系统。分布式版本控制系统不把相应的版本项目集中在一台电脑（或服务器）上，而是每个人的电脑上都保存着一份完整的版本项目。</li>
<li>Github是一个代码托管云服务网站，帮助开发者存储和管理项目源代码，且能够追踪、记录并控制用户对其代码的修改。</li>
<li>Git是一个命令行工具，一个分布式版本控制系统，它在背后追踪和管理代码历史版本。Github是一个代码托管网站，背后采用Git作为版本控制工具。主要将项目代码托管到云服务器上，而不是本地硬盘上。</li>
<li>SSH设置<br>
Secure Shell(安全外壳协议，简称SSH)是一种加密的网络传输协议，可以在不安全的网络中为网络提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。SSH以非对称加密实现身份验证。可以人工生成一对公钥和私钥，通过生成的密钥进行认证，这样就可以在不输入密钥的情况下登录。使用SSH登录Gitlab过程如下：<br>
第一步：登录 git中配置用户名和邮箱<br>
<img src="https://And-Git-roid.github.io/post-images/1595331401470.png" alt="" loading="lazy"><br>
第二步：创建SSH密钥对：<code>ssh-keygen -t ed25519 -C &quot;email@example.com（个人邮箱）&quot;</code><br>
<img src="https://And-Git-roid.github.io/post-images/1595332359951.png" alt="" loading="lazy"><br>
此过程需要按三次回车，在~/users/.ssh文件夹下就可以看到生成的两个密钥。<br>
第二步：查看ssh-agent是否启动<br>
<img src="https://And-Git-roid.github.io/post-images/1595331733798.png" alt="" loading="lazy"><br>
备注：我的已经启动了，为了展示完整过程，我关掉ssh-agent<br>
第三步：启动ssh-agent并将私钥配置给本地SSH<br>
<img src="https://And-Git-roid.github.io/post-images/1595332641904.png" alt="" loading="lazy"><br>
我们可以看到出错：<code>Could not open a connection to your authentication agent.</code><br>
第四步：通过命令解决问题并将私钥添加给ssh-agent<code>ssh-agent bash</code><br>
<img src="https://And-Git-roid.github.io/post-images/1595332902589.png" alt="" loading="lazy"><br>
第五步：给Gitlab配置公钥：Gitlab中点击个人头像--&gt;Settings--&gt;SSH Keys<br>
<img src="https://And-Git-roid.github.io/post-images/1595333074917.png" alt="" loading="lazy"><br>
在Key下方的框中粘贴公钥的所有内容，生成时里面的内容是什么就粘贴什么。最后点击Add key。<br>
第六步：进行连接测试 <code>ssh -T git@服务器域名</code><br>
<img src="https://And-Git-roid.github.io/post-images/1595333271580.png" alt="" loading="lazy"><br>
如果成功了，<code>将会出现Welcome to GitLab, @个人的用户名!</code><br>
<img src="https://And-Git-roid.github.io/post-images/1595333691572.png" alt="" loading="lazy"><br>
第七步：使用TortoiseGit进行克隆测试<br>
1.使用PuTTY Key Generator生成Tortoise可以使用的私钥<br>
点击Load载入~\Users.ssh中生成的私钥<br>
<img src="https://And-Git-roid.github.io/post-images/1595334037897.png" alt="" loading="lazy"><br>
点击<code>Save private key</code>进行存储，最后在~\Users.ssh中我们会得到一个.ppk文件<br>
第八步：使用TortoiseGit进行项目克隆<br>
URL:要克隆的Github项目路径，直接去Github上复制<br>
目录：项目在自己电脑上的保存路径<br>
加载Putty密钥：选择上一步生成的.ppk文件<br>
<img src="https://And-Git-roid.github.io/post-images/1595334434968.png" alt="" loading="lazy"><br>
URL、目录和密钥都设置好之后点击确定<br>
<img src="https://And-Git-roid.github.io/post-images/1595334871529.png" alt="" loading="lazy"><br>
我们看到可以成功克隆了！！！</li>
</ul>
]]></content>
    </entry>
</feed>